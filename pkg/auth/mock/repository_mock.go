// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Zucke/social_prove/pkg/auth (interfaces: Repository)

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	context "context"
	auth "firebase.google.com/go/auth"
	user "github.com/Zucke/social_prove/pkg/user"
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetFirebaseClient mocks base method
func (m *MockRepository) GetFirebaseClient() *auth.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirebaseClient")
	ret0, _ := ret[0].(*auth.Client)
	return ret0
}

// GetFirebaseClient indicates an expected call of GetFirebaseClient
func (mr *MockRepositoryMockRecorder) GetFirebaseClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirebaseClient", reflect.TypeOf((*MockRepository)(nil).GetFirebaseClient))
}

// GetFirebaseUser mocks base method
func (m *MockRepository) GetFirebaseUser(arg0 context.Context, arg1 string) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirebaseUser", arg0, arg1)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirebaseUser indicates an expected call of GetFirebaseUser
func (mr *MockRepositoryMockRecorder) GetFirebaseUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirebaseUser", reflect.TypeOf((*MockRepository)(nil).GetFirebaseUser), arg0, arg1)
}

// WithToken mocks base method
func (m *MockRepository) WithToken(arg0 http.Handler) http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithToken", arg0)
	ret0, _ := ret[0].(http.Handler)
	return ret0
}

// WithToken indicates an expected call of WithToken
func (mr *MockRepositoryMockRecorder) WithToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithToken", reflect.TypeOf((*MockRepository)(nil).WithToken), arg0)
}
