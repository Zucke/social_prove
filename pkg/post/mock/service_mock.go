// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Zucke/social_prove/pkg/post (interfaces: Service)

// Package mock_post is a generated GoMock package.
package mock_post

import (
	context "context"
	post "github.com/Zucke/social_prove/pkg/post"
	user "github.com/Zucke/social_prove/pkg/user"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddLike mocks base method
func (m *MockService) AddLike(arg0 context.Context, arg1, arg2 string) (post.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLike", arg0, arg1, arg2)
	ret0, _ := ret[0].(post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLike indicates an expected call of AddLike
func (mr *MockServiceMockRecorder) AddLike(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLike", reflect.TypeOf((*MockService)(nil).AddLike), arg0, arg1, arg2)
}

// Create mocks base method
func (m *MockService) Create(arg0 context.Context, arg1 *post.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockServiceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockService)(nil).Create), arg0, arg1)
}

// Delete mocks base method
func (m *MockService) Delete(arg0 context.Context, arg1, arg2 string, arg3 user.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockServiceMockRecorder) Delete(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockService)(nil).Delete), arg0, arg1, arg2, arg3)
}

// DeleteLike mocks base method
func (m *MockService) DeleteLike(arg0 context.Context, arg1, arg2 string) (post.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLike", arg0, arg1, arg2)
	ret0, _ := ret[0].(post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLike indicates an expected call of DeleteLike
func (mr *MockServiceMockRecorder) DeleteLike(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLike", reflect.TypeOf((*MockService)(nil).DeleteLike), arg0, arg1, arg2)
}

// GetAll mocks base method
func (m *MockService) GetAll(arg0 context.Context) ([]post.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockServiceMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockService)(nil).GetAll), arg0)
}

// GetAllForUser mocks base method
func (m *MockService) GetAllForUser(arg0 context.Context, arg1 string) ([]post.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllForUser", arg0, arg1)
	ret0, _ := ret[0].([]post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllForUser indicates an expected call of GetAllForUser
func (mr *MockServiceMockRecorder) GetAllForUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllForUser", reflect.TypeOf((*MockService)(nil).GetAllForUser), arg0, arg1)
}

// GetByID mocks base method
func (m *MockService) GetByID(arg0 context.Context, arg1 string) (post.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockServiceMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockService)(nil).GetByID), arg0, arg1)
}

// Update mocks base method
func (m *MockService) Update(arg0 context.Context, arg1, arg2 string, arg3 user.Role, arg4 *post.Post) (post.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockServiceMockRecorder) Update(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockService)(nil).Update), arg0, arg1, arg2, arg3, arg4)
}

// WithPagination mocks base method
func (m *MockService) WithPagination(arg0 []post.Post, arg1, arg2 int) ([]post.Post, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithPagination", arg0, arg1, arg2)
	ret0, _ := ret[0].([]post.Post)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// WithPagination indicates an expected call of WithPagination
func (mr *MockServiceMockRecorder) WithPagination(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithPagination", reflect.TypeOf((*MockService)(nil).WithPagination), arg0, arg1, arg2)
}
