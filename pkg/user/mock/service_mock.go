// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Zucke/social_prove/pkg/user (interfaces: Service)

// Package mock_user is a generated GoMock package.
package mock_user

import (
	context "context"
	user "github.com/Zucke/social_prove/pkg/user"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockService) Create(arg0 context.Context, arg1 *user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockServiceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockService)(nil).Create), arg0, arg1)
}

// Delete mocks base method
func (m *MockService) Delete(arg0 context.Context, arg1 user.Role, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockServiceMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockService)(nil).Delete), arg0, arg1, arg2)
}

// FirebaseAuth mocks base method
func (m *MockService) FirebaseAuth(arg0 context.Context, arg1 string) (*user.User, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirebaseAuth", arg0, arg1)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FirebaseAuth indicates an expected call of FirebaseAuth
func (mr *MockServiceMockRecorder) FirebaseAuth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirebaseAuth", reflect.TypeOf((*MockService)(nil).FirebaseAuth), arg0, arg1)
}

// FollowTo mocks base method
func (m *MockService) FollowTo(arg0 context.Context, arg1, arg2 string) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FollowTo", arg0, arg1, arg2)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FollowTo indicates an expected call of FollowTo
func (mr *MockServiceMockRecorder) FollowTo(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FollowTo", reflect.TypeOf((*MockService)(nil).FollowTo), arg0, arg1, arg2)
}

// GetAll mocks base method
func (m *MockService) GetAll(arg0 context.Context) ([]user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockServiceMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockService)(nil).GetAll), arg0)
}

// GetAllActive mocks base method
func (m *MockService) GetAllActive(arg0 context.Context) ([]user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllActive", arg0)
	ret0, _ := ret[0].([]user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllActive indicates an expected call of GetAllActive
func (mr *MockServiceMockRecorder) GetAllActive(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllActive", reflect.TypeOf((*MockService)(nil).GetAllActive), arg0)
}

// GetByEmail mocks base method
func (m *MockService) GetByEmail(arg0 context.Context, arg1 string) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", arg0, arg1)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail
func (mr *MockServiceMockRecorder) GetByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockService)(nil).GetByEmail), arg0, arg1)
}

// GetByID mocks base method
func (m *MockService) GetByID(arg0 context.Context, arg1 string) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockServiceMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockService)(nil).GetByID), arg0, arg1)
}

// GetByRole mocks base method
func (m *MockService) GetByRole(arg0 context.Context, arg1 user.Role) ([]user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByRole", arg0, arg1)
	ret0, _ := ret[0].([]user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByRole indicates an expected call of GetByRole
func (mr *MockServiceMockRecorder) GetByRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByRole", reflect.TypeOf((*MockService)(nil).GetByRole), arg0, arg1)
}

// GetByUID mocks base method
func (m *MockService) GetByUID(arg0 context.Context, arg1 string) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUID", arg0, arg1)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUID indicates an expected call of GetByUID
func (mr *MockServiceMockRecorder) GetByUID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUID", reflect.TypeOf((*MockService)(nil).GetByUID), arg0, arg1)
}

// LoginUser mocks base method
func (m *MockService) LoginUser(arg0 context.Context, arg1 *user.User) (*user.User, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", arg0, arg1)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoginUser indicates an expected call of LoginUser
func (mr *MockServiceMockRecorder) LoginUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockService)(nil).LoginUser), arg0, arg1)
}

// UnfollowTo mocks base method
func (m *MockService) UnfollowTo(arg0 context.Context, arg1, arg2 string) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnfollowTo", arg0, arg1, arg2)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnfollowTo indicates an expected call of UnfollowTo
func (mr *MockServiceMockRecorder) UnfollowTo(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnfollowTo", reflect.TypeOf((*MockService)(nil).UnfollowTo), arg0, arg1, arg2)
}

// Update mocks base method
func (m *MockService) Update(arg0 context.Context, arg1, arg2 string, arg3 user.Role, arg4 *user.User) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockServiceMockRecorder) Update(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockService)(nil).Update), arg0, arg1, arg2, arg3, arg4)
}

// WithPagination mocks base method
func (m *MockService) WithPagination(arg0 []user.User, arg1, arg2 int) ([]user.User, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithPagination", arg0, arg1, arg2)
	ret0, _ := ret[0].([]user.User)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// WithPagination indicates an expected call of WithPagination
func (mr *MockServiceMockRecorder) WithPagination(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithPagination", reflect.TypeOf((*MockService)(nil).WithPagination), arg0, arg1, arg2)
}
